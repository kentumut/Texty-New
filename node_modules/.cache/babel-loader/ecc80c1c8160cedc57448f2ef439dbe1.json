{"ast":null,"code":"var _jsxFileName = \"/Users/kent/Desktop/alles/programmieren/Texty-New/src/contexts/SettingsContext.js\",\n    _s = $RefreshSig$();\n\n// provider === component\nimport { createContext, useEffect } from \"react\";\nimport { defaultSettings } from \"../config\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport getColorPresets, { defaultPreset, colorPresets } from \"../utils/getColorPresets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = { ...defaultSettings,\n  // Mode\n  onToggleMode: () => {},\n  onChangeMode: () => {},\n  // Direction\n  onToggleDirection: () => {},\n  onChangeDirection: () => {},\n  onChangeDirectionByLang: () => {},\n  // Layout\n  onToggleLayout: () => {},\n  onChangeLayout: () => {},\n  // Contrast\n  onToggleContrast: () => {},\n  onChangeContrast: () => {},\n  // Color\n  onChangeColor: () => {},\n  setColor: defaultPreset,\n  colorOption: [],\n  // Stretch\n  onToggleStretch: () => {},\n  // Reset\n  onResetSetting: () => {}\n};\nconst SettingsContext = /*#__PURE__*/createContext(initialState);\n\nconst SettingsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [settings, setSettings] = useLocalStorage(\"settings\", {\n    themeMode: initialState.themeMode,\n    themeLayout: initialState.themeLayout,\n    themeStretch: initialState.themeStretch,\n    themeContrast: initialState.themeContrast,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets\n  });\n  const isArabic = localStorage.getItem(\"i18nextLng\") === \"ar\";\n  useEffect(() => {\n    if (isArabic) {\n      onChangeDirectionByLang(\"ar\");\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isArabic]); // Mode\n\n  const onToggleMode = () => {\n    setSettings({ ...settings,\n      themeMode: settings.themeMode === \"light\" ? \"dark\" : \"light\"\n    });\n  };\n\n  const onChangeMode = event => {\n    setSettings({ ...settings,\n      themeMode: event.target.value\n    });\n  }; // Direction\n\n\n  const onToggleDirection = () => {\n    setSettings({ ...settings,\n      themeDirection: settings.themeDirection === \"rtl\" ? \"ltr\" : \"rtl\"\n    });\n  };\n\n  const onChangeDirection = event => {\n    setSettings({ ...settings,\n      themeDirection: event.target.value\n    });\n  };\n\n  const onChangeDirectionByLang = lang => {\n    setSettings({ ...settings,\n      themeDirection: lang === \"ar\" ? \"rtl\" : \"ltr\"\n    });\n  }; // Layout\n\n\n  const onToggleLayout = () => {\n    setSettings({ ...settings,\n      themeLayout: settings.themeLayout === \"vertical\" ? \"horizontal\" : \"vertical\"\n    });\n  };\n\n  const onChangeLayout = event => {\n    setSettings({ ...settings,\n      themeLayout: event.target.value\n    });\n  }; // Contrast\n\n\n  const onToggleContrast = () => {\n    setSettings({ ...settings,\n      themeContrast: settings.themeContrast === \"default\" ? \"bold\" : \"default\"\n    });\n  };\n\n  const onChangeContrast = event => {\n    setSettings({ ...settings,\n      themeContrast: event.target.value\n    });\n  }; // Color\n\n\n  const onChangeColor = event => {\n    setSettings({ ...settings,\n      themeColorPresets: event.target.value\n    });\n  }; // Stretch\n\n\n  const onToggleStretch = () => {\n    setSettings({ ...settings,\n      themeStretch: !settings.themeStretch\n    });\n  }; // Reset\n\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeLayout: initialState.themeLayout,\n      themeStretch: initialState.themeStretch,\n      themeContrast: initialState.themeContrast,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: { ...settings,\n      // Mode\n      onToggleMode,\n      onChangeMode,\n      // Direction\n      onToggleDirection,\n      onChangeDirection,\n      onChangeDirectionByLang,\n      // Layout\n      onToggleLayout,\n      onChangeLayout,\n      // Contrast\n      onChangeContrast,\n      onToggleContrast,\n      // Stretch\n      onToggleStretch,\n      // Color\n      onChangeColor,\n      setColor: getColorPresets(settings.themeColorPresets),\n      colorOption: colorPresets.map(color => ({\n        name: color.name,\n        value: color.main\n      })),\n      // Reset\n      onResetSetting\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsProvider, \"TST3fIuXKthLF3cBryCSEHngWAw=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = SettingsProvider;\nexport { SettingsContext };\nexport default SettingsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["createContext","useEffect","defaultSettings","useLocalStorage","getColorPresets","defaultPreset","colorPresets","initialState","onToggleMode","onChangeMode","onToggleDirection","onChangeDirection","onChangeDirectionByLang","onToggleLayout","onChangeLayout","onToggleContrast","onChangeContrast","onChangeColor","setColor","colorOption","onToggleStretch","onResetSetting","SettingsContext","SettingsProvider","children","settings","setSettings","themeMode","themeLayout","themeStretch","themeContrast","themeDirection","themeColorPresets","isArabic","localStorage","getItem","event","target","value","lang","map","color","name","main"],"sources":["/Users/kent/Desktop/alles/programmieren/Texty-New/src/contexts/SettingsContext.js"],"sourcesContent":["// provider === component\nimport { createContext, useEffect } from \"react\";\nimport { defaultSettings } from \"../config\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport getColorPresets, {\n  defaultPreset,\n  colorPresets,\n} from \"../utils/getColorPresets\";\n\nconst initialState = {\n  ...defaultSettings,\n\n  // Mode\n  onToggleMode: () => {},\n  onChangeMode: () => {},\n\n  // Direction\n  onToggleDirection: () => {},\n  onChangeDirection: () => {},\n  onChangeDirectionByLang: () => {},\n\n  // Layout\n  onToggleLayout: () => {},\n  onChangeLayout: () => {},\n\n  // Contrast\n  onToggleContrast: () => {},\n  onChangeContrast: () => {},\n\n  // Color\n  onChangeColor: () => {},\n  setColor: defaultPreset,\n  colorOption: [],\n\n  // Stretch\n  onToggleStretch: () => {},\n\n  // Reset\n  onResetSetting: () => {},\n};\n\nconst SettingsContext = createContext(initialState);\n\nconst SettingsProvider = ({ children }) => {\n  const [settings, setSettings] = useLocalStorage(\"settings\", {\n    themeMode: initialState.themeMode,\n    themeLayout: initialState.themeLayout,\n    themeStretch: initialState.themeStretch,\n    themeContrast: initialState.themeContrast,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets,\n  });\n\n  const isArabic = localStorage.getItem(\"i18nextLng\") === \"ar\";\n\n  useEffect(() => {\n    if (isArabic) {\n      onChangeDirectionByLang(\"ar\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isArabic]);\n\n  // Mode\n\n  const onToggleMode = () => {\n    setSettings({\n      ...settings,\n      themeMode: settings.themeMode === \"light\" ? \"dark\" : \"light\",\n    });\n  };\n\n  const onChangeMode = (event) => {\n    setSettings({\n      ...settings,\n      themeMode: event.target.value,\n    });\n  };\n\n  // Direction\n\n  const onToggleDirection = () => {\n    setSettings({\n      ...settings,\n      themeDirection: settings.themeDirection === \"rtl\" ? \"ltr\" : \"rtl\",\n    });\n  };\n\n  const onChangeDirection = (event) => {\n    setSettings({\n      ...settings,\n      themeDirection: event.target.value,\n    });\n  };\n\n  const onChangeDirectionByLang = (lang) => {\n    setSettings({\n      ...settings,\n      themeDirection: lang === \"ar\" ? \"rtl\" : \"ltr\",\n    });\n  };\n\n  // Layout\n\n  const onToggleLayout = () => {\n    setSettings({\n      ...settings,\n      themeLayout:\n        settings.themeLayout === \"vertical\" ? \"horizontal\" : \"vertical\",\n    });\n  };\n\n  const onChangeLayout = (event) => {\n    setSettings({\n      ...settings,\n      themeLayout: event.target.value,\n    });\n  };\n\n  // Contrast\n\n  const onToggleContrast = () => {\n    setSettings({\n      ...settings,\n      themeContrast: settings.themeContrast === \"default\" ? \"bold\" : \"default\",\n    });\n  };\n\n  const onChangeContrast = (event) => {\n    setSettings({\n      ...settings,\n      themeContrast: event.target.value,\n    });\n  };\n\n  // Color\n\n  const onChangeColor = (event) => {\n    setSettings({\n      ...settings,\n      themeColorPresets: event.target.value,\n    });\n  };\n\n  // Stretch\n\n  const onToggleStretch = () => {\n    setSettings({\n      ...settings,\n      themeStretch: !settings.themeStretch,\n    });\n  };\n\n  // Reset\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeLayout: initialState.themeLayout,\n      themeStretch: initialState.themeStretch,\n      themeContrast: initialState.themeContrast,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets,\n    });\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        ...settings, // Mode\n        onToggleMode,\n        onChangeMode,\n\n        // Direction\n        onToggleDirection,\n        onChangeDirection,\n        onChangeDirectionByLang,\n\n        // Layout\n        onToggleLayout,\n        onChangeLayout,\n\n        // Contrast\n        onChangeContrast,\n        onToggleContrast,\n\n        // Stretch\n        onToggleStretch,\n\n        // Color\n        onChangeColor,\n        setColor: getColorPresets(settings.themeColorPresets),\n        colorOption: colorPresets.map((color) => ({\n          name: color.name,\n          value: color.main,\n        })),\n\n        // Reset\n        onResetSetting,\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport {SettingsContext};\n\nexport default SettingsProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}